knitr::opts_chunk$set(echo = TRUE)
install.packages('knitr')
install.packages('knitr')
?sum
2+0+1
print("Hello World")
2+0+1
print("Hello World")
2+0+1
print "Hello world!"
print("Hello world!)
")
print(Hello World)
my_var <- 201
print(my_var)
too_expensive
print(too_expensive)\
print(too_expensive)
max_puppies
install.packages("stringr")
library("stringr")
library("stringr")
library("stringr")
#
capital_intro <- str_to_title(my_intro)
#
capital_intro <- str_to_upper(my_intro)
# My age
my_age <- 19
# My name
my_name <- "Alan Liu"
# Create a function called make_introduction that takes two arguments: name and age
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
# Create a variable called my_intro and print it
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Replace "Hello, my name is" with "Hey, I'm" in my_intro and print it
print(sub("Hello, my name is", "Hey, I'm", my_intro))
#
capital_intro <- str_to_upper(my_intro)
#install.packages("stringr")
library("stringr")
#################
#### PART 1 #####
#################
#install.packages("stringr")
library("stringr")
# My age
my_age <- 19
# My name
my_name <- "Alan Liu"
# Create a function called "make_introduction" that takes two arguments: name and age
# return "Hello, my name is (name) and I'm (age) years old."
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
# Create a variable called "my_intro" and print it
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
# Create a variable called "casual_intro" and print it
casual_intro <- (sub("Hello, my name is", "Hey, I'm", my_intro))
print(casual_intro)
# Capitalize each letter in "my-intro" and store it in a new variable called "capital_intro"
capital_intro <- str_to_upper(my_intro)
print(capital_intro)
# Count the number of occurences of 'e' in "my_intro" and store in a new variable called "intro_e_count"
intro_e_count <- str_count(my_intro, 'e')
print(intro_e_count)
#################
#### PART 2 #####
#################
# store six books I like in a new variable called "books" and print it
books <- c("Hachet", "The Giver", "Holes", "Fahrenheit 451", "Things Fall Apart", "The Things They Carried")
print(books)
# store first three books in a new variable called "top_three_books" and print it
top_three_books <- books[1:3]
print(top_three_books)
# concat the phrase "is a great read!" to each string in books and store it in a new variable called "book_reviews"
# Print it
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Create a function called "remove_book" that takes two arguments:
# a string vector of book_titles and the index to be removed.
# Removes the element at the given index from the given vector
# and return the vector
remove_book <- function(book_titles, index) {
book_titles <- book_titles[-index]
}
# Remove the fourth book in the vector of books, store in a variable called
# "books_without_four" and print it
books_without_four <- remove_book(books, 4)
print(books_without_four)
# Filter and store book titles with more than 15 characters into a new
# variable called "long_titles" and print it
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
# create a variable called "numbers" storing number from 1 to 201
numbers <- 1:201
# create a variable called "squared_numbers" with numbers squared
squared_numbers <- numbers * numbers
# create a variable called "squared_mean" that stores the mean of all numbers
# in "squared_numbers" and print it
squared_mean <- mean(squared_numbers)
print(squared_mean)
# create a variable called "squared_median" that stores the median of all numbers
# in "squared_numbers" and print it
squared_median <- median(squared_numbers)
print(squared_median)
# create a variable called "squares" that stores all numbers in "numbers"
# that are squares and print it
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
# Create a variable called "spring_break" that shows "March 16, 2019" in
# date format
spring_break <- as.Date("March 16, 2019", "%b %d, %Y")
# Create a variable called "today" that shows today's date
today <- Sys.Date()
# Create and print a variable called "days_to_break" that stores the time
# difference between spring break date and today date
days_to_break <- spring_break - today
print(paste("Time difference of today date and spring break date is", days_to_break, "days"))
# Create a list called birthdays that store my family members' birthdays
birthdays <- list(Kevin = as.Date("January 24, 1970", "%b %d, %Y"), Sandra = as.Date("September 13, 1969", "%b %d, %Y"), Alan = as.Date("January 2, 2000", "%b %d, %Y"))
# Create a variable parent_bday
parent_bday <- format(birthdays$Kevin, "%b %d")
print(parent_bday)
# Create a variable birthdays_2019
birthdays_2019 <- lapply(birthdays, format, "%b %d")
print(birthdays_2019)
# Create a function called "date_has_passed" that takes a Date argument
# and return whether if the date is pass (TRUE or FALSE)
date_has_passed <- function(given_date) {
(given_date - as.Date("January 23, 2019", "%b %d, %Y")) < 0
}
print(date_has_passed(Sys.Date()))
# Create a function called "make_birthday_announcement" that takes two
# arguments: a string of name and a Date object
# return "(name)'s birthday is in (date difference) days."
make_birthday_announcement <- function(name, given_date) {
paste0(name, "'s birthday is in ", (given_date - as.Date("January 23", "%b %d")), " days.")
}
# Create a variable called "bday_announcements", use the function
# "make_birthday_announcements" with two arguments: the vector of element
# names with names() function and the vector of element values with
# unlist() function that also removes the names
bday_announcements <- mapply(make_birthday_announcement, names(birthdays_2019), as.Date(unlist(birthdays_2019, use.names = FALSE), "%b %d"))
print(bday_announcements)
#install.packages("stringr")
install.packages("styler")
#install.packages("stringr")
install.packages("styler")
#install.packages("stringr")
install.packages("styler")
library("styler")
library("styler")
library("styler")
styler:::style_active_file()
#install.packages("stringr")
#install.packages("styler")
#install.packages("lintr")
library("stringr")
#install.packages("stringr")
#install.packages("styler")
#install.packages("lintr")
library("stringr")
#install.packages("stringr")
#install.packages("styler")
install.packages("lintr")
library("lintr")
library("lintr")
styler:::style_active_file()
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
count(unique(manufacturers))
# Filter the data set for vehicles manufactured in 1997
vehicles$year == 1997
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, "hwy"])
install.packages("dplyr")
# Load the package (tell R functions are available for use)
library("dplyr")
# make the data frame
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
height <- c(64, 74, 69, 69, 71)
weight <- c(135, 156, 139, 144, 152)
my_data <- data.frame(name, height, weight,
stringsAsFactors=FALSE)
# use dplyr to get a data frame
# with `name` and `height` cols
select(my_data, name, height)
# Select `year` and `demVotes` columns from
votes <- select(presidentialElections, year, demVote)
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library("dplyr")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library("dplyr")
# install library of data sets
install.packages("nycflights13")
# load library
library("nycflights13")
# inspect the `flights` data frame
View(head(flights)) #first 6 rows
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
library("nycflights13")
library("dplyr")
View("nycflights13")
source('D:/UW/academic/Info 201/book-exercises/chapter-11-exercises/exercise-5/exercise.R', echo=TRUE)
View(Flights)
View(flights)
flights %>%
group_by(month) %>%
summarize(
dep_delay_by_month = mean(dep_delay)
)
flights %>%
group_by(month) %>%
filter(is.na(dep_delay))
flights %>%
group_by(month) %>%
# filter(is.na(dep_delay))
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
dep_delay_by_month <- flights %>%
group_by(month) %>%
# filter(is.na(dep_delay))
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
is.data.frame(dep_delay_by_month)
is.tibble(dep_delay_by_month)
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay)
# You can use the `head()` function to view just the first few rows
airports <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay)
arrange(avg_arr_delay)
# You can look up these airports in the `airports` data frame!
View(airports)
airports %>%
filter(faa == "CAE")
# Which city was flown to w
# Table of contact information
student_contact <- data.frame(
student_id = c(1, 2, 3, 4), # id numbers
email = c("mason@uw.edu", "tabi@uw.edu", "bryce@uw.edu", "ada@uw.edu")
)
# Table of information about majors
student_majors <- data.frame(
student_id = c(1, 5, 4, 2), # id numbers
major = c('sociology', 'biology', 'math', 'informatics')
)
left_join(student_contact, student_majors, by = "student_id")
# Table of contact information
student_contact <- data.frame(
s_id = c(1, 2, 3, 4), # id numbers
email = c("mason@uw.edu", "tabi@uw.edu", "bryce@uw.edu", "ada@uw.edu")
)
# Table of information about majors
student_majors <- data.frame(
student_id = c(1, 5, 4, 2), # id numbers
major = c('sociology', 'biology', 'math', 'informatics')
)
left_join(student_contact, student_majors, by = "student_id")
# Table of contact information
student_contact <- data.frame(
student_id = c(1, 2, 3, 4), # id numbers
email = c("mason@uw.edu", "tabi@uw.edu", "bryce@uw.edu", "ada@uw.edu")
)
# Table of information about majors
student_majors <- data.frame(
student_id = c(1, 5, 4, 2), # id numbers
major = c('sociology', 'biology', 'math', 'informatics')
)
left_join(student_majors, student_contact, by = "student_id")
# Table of contact information
student_contact <- data.frame(
student_id = c(1, 2, 3, 4), # id numbers
email = c("mason@uw.edu", "tabi@uw.edu", "bryce@uw.edu", "ada@uw.edu")
)
# Table of information about majors
student_majors <- data.frame(
student_id = c(1, 5, 4, 2), # id numbers
major = c('sociology', 'biology', 'math', 'informatics')
)
full_join(student_majors, student_contact, by = "student_id")
# Install the `pscl` package to use the `presidentialElections` data frame
install.packages("pscl") # once per machine
library("pscl")          # in each relevant script
# You should now be able to interact with the data set
View(presidentialElections)
# Select `year` and `demVotes` (percentage of vote won by the Democrat)
# from the `presidentialElections` data frame
votes <- select(presidentialElections, year, demVote)
# Select `year` and `demVotes` (percentage of vote won by the Democrat)
# from the `presidentialElections` data frame
votes <- select(presidentialElections, year, demVote)
library("dplr")
library("dplyr")
# Select `year` and `demVotes` (percentage of vote won by the Democrat)
# from the `presidentialElections` data frame
votes <- select(presidentialElections, year, demVote)
VIew(votes)
View(votes)
install.packages("ggplot2")
# Load necessary packages (`tidyr`, `dplyr`, and `ggplot2`)
library("tidyr")
library("dplyr")
library("ggplot2")
setwd("D:/UW/academic/Info 201/book-exercises/chapter-12-exercises/exercise-1")
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
read.csv("data/avocado.csv", stringsAsFactors = F)
# Load the `data/avocado.csv` file into a variable `avocados`
# Make sure strings are *not* read in as factors
avocados <- read.csv("data/avocado.csv", stringsAsFactors = F)
View(avocados)
?as.Date()
# To tell R to treat the `Date` column as a date (not just a string)
# Redefine that column as a date using the `as.Date()` function
# (hint: use the `mutate` function)
avocados <- mutate(avocados, Date = as.Date(avocados$Date, "%Y-%m-%d"))
# The file had some uninformative column names, so rename these columns:
# `X4046` to `small_haas`
# `X4225` to `large_haas`
# `X4770` to `xlarge_haas`
colnames(avocados)[5:7] <- c("small_haas", "large_haas", "xlarge_haas")
# The data only has sales for haas avocados. Create a new column `other_avos`
# that is the Total.Volume minus all haas avocados (small, large, xlarge)
avocados <- mutate(avocados, other_avos = Total.Volume - small_haas - large_haas - xlarge_haas)
# To perform analysis by avocado size, create a dataframe `by_size` that has
# only `Date`, `other_avos`, `small_haas`, `large_haas`, `xlarge_haas`
by_size <- avocados %>%
select(Date, other_avos, small_haas:xlarge_haas)
View(by_size)
size_gathered <- gather(
by_size,
key = size,
value = volume,
-Date
)
View(size_gathered)
size_gathered %>%
group_by(size) %>%
summarize(
avg_sales_volume = mean(volume)
)
ggplot(size_gathered) +
geom_smooth(mapping = aes(x = Date, y = volume, col = size), se = F)
by_type <- avocados %>%
group_by(Date, type) %>%
summarize(
sum_volume = sum(Total.Volume)
)
View(by_type)
by_type_wide <- spread(
by_type,
key = type,
value = sum_volume
)
View(by_type_wide)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
