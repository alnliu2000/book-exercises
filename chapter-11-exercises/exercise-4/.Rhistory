# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, delay_time = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delay_time = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, delay_time)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, delay_time)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delay_time)
View(flights)
rm(list=ls())
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
manufacturers <- select(vehicles, make) %>%
pull()
View(flights)
flights <- mutate(flights, delay_time = arr_delay - dep_delay) %>%
arrange( -delay_time)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
?hist()
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$delay_time)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, delay_time))
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(select(flights, delay_time))
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(select(flights, delay_time)))
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(select(flights, delay_time)))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(delay = mean(delay_time, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, delay = mean(delay_time, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean(delay_time, na.rm = TRUE))
delay =
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, delay = mean(delay_time, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flights, origin, destination, delay_time)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
SEA <- select(flights, origin, dest, delay_time)
# On average, did flights to SeaTac gain or loose time?
%>%
summarize(delay = mean(delay_time, na.rm = TRUE))
%>%
summarize(delay = mean(delay_time, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(SEA, delay = mean(delay_time, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(SEA, delay = mean(delay_time, na.rm = TRUE))
SeaTac <- filter(flights, dest == 'SEA') %>%
select(origin, dest, delay_time)
# On average, did flights to SeaTac gain or loose time?
summarize(SeaTac, delay = mean(delay_time, na.rm = TRUE))
filter(flights, origin == "JFK", dest == "SEA") %>%
filter(air_time == min(air_time))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK", dest == "SEA") %>%
filter(air_time == max(air_time))
filter(flights, origin == "JFK", dest == "SEA") %>%
filter(air_time == max(air_time))
