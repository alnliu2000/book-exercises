#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
is.vector(manufacturers)
is.data.frame(manufacturers)
select(vehicles, make) %>%
manufacturers <- pull(n)
manufacturers <- select(vehicles, make) %>%
pull(n)
manufacturers <- select(vehicles, make) %>%
pull()
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
?distinct()
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(manufacturers)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, manufacturers)
# Save this vector in a variable
manufacturers <- select(vehicles, make) %>%
pull()
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, manufacturers)
manufacturers <- select(vehicles, make) %>%
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, manufacturers)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make) %>%
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, manufacturers)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers) #128
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter(vehicles, year == 1997), hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicle, average = (cty + hwy) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicles, average = (cty + hwy) / 2)
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = (cty + hwy) / 2)
View(vehicles)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy = min(hwy)), ID)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy == min(hwy)), ID)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy == min(hwy)), id)
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
#install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
#devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers) #128
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, ]$hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles$average <- (vehicles$cty + vehicles$hwy) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_twenty_mpg <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_twenty_mpg[two_wheel_twenty_mpg$hwy == min(two_wheel_twenty_mpg$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, drive == "2 Wheel Drive", city = 20, hwy == min(hwy)), id)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2 Wheel Drive", city == 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2 Wheel Drive", cty == 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty == 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, drive == "2-Wheel Drive", cty == 20, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
two_wheel_twenty_mpg[two_wheel_twenty_mpg$hwy == min(two_wheel_twenty_mpg$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, drive == "2-Wheel Drive", cty == 20, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(filter(vehicles, drive == "2-Wheel Drive", cty == 20), hwy == min(hwy)), id)
filter(vehicles, drive == "2-Wheel Drive", cty == 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
best_hwy_mpg <- function(year_choice, make_choice) {
filter(vehicles, year == year_choice, make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_hwy_mpg("1995", "Honda")
# What was the most efficient Honda model of 1995?
best_hwy_mpg("1995", "Honda")
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles <- arrange(filter(vehicles, year == 1997), hwy)
View(vehicles)
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make) %>%
pull()
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, make)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter(vehicles, year == 1997), hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty == 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty == 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_hwy_mpg <- function(year_choice, make_choice) {
filter(vehicles, year == year_choice, make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_hwy_mpg("1995", "Honda")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
manufacturers <- select(vehicles, make) %>%
pull()
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make) %>%
pull()
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, make)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter(vehicles, year == 1997), hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty == 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty == 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_hwy_mpg <- function(year_choice, make_choice) {
filter(vehicles, year == year_choice, make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_hwy_mpg("1995", "Honda")
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make) %>%
pull()
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(vehicles, make)
# Filter the data set for vehicles manufactured in 1997
filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(filter(vehicles, year == 1997), hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles <- mutate(vehicles, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty == 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(vehicles, drive == "2-Wheel Drive", cty == 20) %>%
filter(hwy == min(hwy)) %>%
select(id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_hwy_mpg <- function(year_choice, make_choice) {
filter(vehicles, year == year_choice, make == make_choice) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_hwy_mpg("1995", "Honda")
library(fueleconomy)
View(vehicles)
# Install and load the "fueleconomy" package
#install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
force = TRUE
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
install.packages("devtools")
