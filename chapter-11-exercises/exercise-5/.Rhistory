library("nycflights13")
library("dplyr")
View("nycflights13")
library("nycflights13")
library("dplyr")
dep_delay_by_month <- flights %>%
group_by(month) %>%
# filter(is.na(dep_delay))
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
View(flights)
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
airports <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay)
airports <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(avg_arr_delay) %>%
head()
flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# You can look up these airports in the `airports` data frame!
View(airports)
airports <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
# You can look up these airports in the `airports` data frame!
View(airports)
airports <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay) %>%
head()
View(airports)
rm(list=ls())
# Exercise 5: dplyr grouped operations
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- flights %>%
group_by(month) %>%
# filter(is.na(dep_delay))
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_delay_by_month)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay) %>%
head()
# You can look up these airports in the `airports` data frame!
View(airports)
# Which city was flown to with the highest average speed?
airports %>%
filter(faa == "CAE")
View(flights)
flights %>%
group_by(dest) %>%
summarize(
avg_speed = mean(distance / (hour + minute / 60), na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed))
flights %>%
summarize(
avg_speed = mean(distance / (hour + minute / 60), na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed))
flights %>%
summarize(
avg_speed = mean(distance / (hour + minute / 60), na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed)) %>%
select(dest)
flights %>%
group_by(dest) %>%
summarize(
avg_speed = mean(distance / (hour + minute / 60), na.rm = TRUE)
) %>%
filter(avg_speed == max(avg_speed))
filter(flights, origin == "JFK", dest == "SEA") %>%
arrange(air_time)
# Exercise 4: practicing with dplyr
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
nrow(flights)
ncol(flights)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delay_time = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delay_time)
View(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, delay_time = arr_delay - dep_delay) %>%
arrange(-delay_time)
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(select(flights, delay_time)))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, delay = mean(delay_time, na.rm = TRUE)) # gain time
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
SeaTac <- filter(flights, dest == 'SEA') %>%
select(origin, dest, delay_time)
# On average, did flights to SeaTac gain or loose time?
summarize(SeaTac, delay = mean(delay_time, na.rm = TRUE)) # gain time
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
filter(flights, origin == "JFK", dest == "SEA") %>%
arrange(air_time)
filter(flights, origin == "JFK", dest == "SEA") %>%
arrange(air_time) %>%
summarize(
avg_air_time = mean(air_time, na.rm = TRUE)
)
filter(flights, origin == "JFK", dest == "SEA") %>%
arrange(air_time) %>%
filter(flights, origin == "JFK", dest == "SEA") %>%
arrange(air_time)
